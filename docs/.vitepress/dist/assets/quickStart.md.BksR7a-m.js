import{_ as a,c as e,o as t,a2 as o}from"./chunks/framework.Coh0NA4B.js";const m=JSON.parse('{"title":"快速开始","description":"","frontmatter":{"prev":false,"next":false},"headers":[],"relativePath":"quickStart.md","filePath":"quickStart.md"}'),r={name:"quickStart.md"},i=o('<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><p>通过构建您的首个 Hello World 扩展程序，了解 Chrome 扩展程序开发的基础知识。</p><h2 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h2><p>您将创建一个“Hello World”示例，在本地加载扩展程序，查找日志，并探索其他推荐的扩展程序。</p><h2 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h2><p>首先，新建一个目录来存储您的扩展程序文件。<br> 接下来，在此目录中创建一个名为 manifest.json 的新文件。此 JSON 文件描述了扩展程序的功能和配置。例如，大多数清单文件包含一个 &quot;action&quot; 键，用于声明 Chrome 应用作扩展程序的操作图标的图片，以及当用户点击扩展程序的操作图标时在弹出式窗口中显示的 HTML 页面。</p>',6),n=[i];function s(c,l,_,d,h,p){return t(),e("div",null,n)}const f=a(r,[["render",s]]);export{m as __pageData,f as default};
